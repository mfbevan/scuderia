// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import "../interfaces/IScuderia.sol";
import "./ERC721Stakable.sol";
import "./ScuderiaSVG.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "erc721a/contracts/ERC721A.sol";

contract Scuderia is IScuderia, Ownable, ERC721Stakable {
    uint256 constant MAX_SUPPLY_GENESIS = 5000;
    uint256 constant MAX_SUPPLY_SECONDARY = 10000;
    uint64 MINT_PRICE = 0.1 ether;
    uint8 genesisSupply = 0;
    uint8 secondarySupply = 0;

    string private tokenBaseURI;
    string private contractURI;

    bool public saleActive = false;

    constructor(address _ownerAddress) ERC721Stakable("Scuderia", "SCD") {
        require(_ownerAddress != address(0), "owner address cannot be 0x0");
        if (_ownerAddress != msg.sender) {
            transferOwnership(_ownerAddress);
        }
    }

    function mint(uint256 _quantity) external payable {
        if (!saleActive) revert SaleInactive();
        if (_quantity == 0) revert ZeroQuantity();
        if (genesisSupply + _quantity > MAX_SUPPLY_GENESIS)
            revert SupplyWillBeExceeded();
        if (msg.value != MINT_PRICE * _quantity)
            revert IncorrectPaymentAmount();
        genesisSupply++;
        _safeMint(msg.sender, _quantity);
    }

    function secondaryMint(uint256 _blueprintId) external {
        // ...
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        return _buildURI();
    }

    /**
     * @notice Build the SVG URI for the given token
     */
    function _buildURI() internal view returns (string memory) {
        return ScuderiaSVG.getSVG();
    }

    /**
     * @notice Sets the initial token id to start at 1 instead of 0
     */
    function _startTokenId() internal pure override returns (uint256) {
        return 1;
    }

    /**
     * @notice Toggle whether nft minting is active
     */
    function toggleSale() external onlyOwner {
        saleActive = !saleActive;
    }

    /**
     * @notice Transfer funds out of contract
     * @param _recipient Receiver of funds
     */
    function withdraw(address _recipient) public onlyOwner {
        payable(_recipient).transfer(address(this).balance);
    }
}
