// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import "../interfaces/IScuderia.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "erc721a/contracts/ERC721A.sol";

contract Scuderia is IScuderia, Ownable, ERC721A {
    uint16 constant MAX_SUPPLY_GENESIS = 5000;
    uint16 constant MAX_SUPPLY_SECONDARY = 10000;
    uint64 MINT_PRICE = 0.1 ether;

    string private tokenBaseURI;
    string private contractURI;

    bool public saleActive = false;

    // Token Id => currently staked
    mapping(uint256 => bool) staked;


    constructor(address _ownerAddress) ERC721A("Scuderia", "SCD") {
        require(_ownerAddress != address(0), "owner address cannot be 0x0");
        if (_ownerAddress != msg.sender) {
            transferOwnership(_ownerAddress);
        }
    }

    function mint(uint256 _quantity) external payable {
        _mint(msg.sender, _quantity);
    }

    function secondaryMint(uint256 _blueprintId) external {
        // ...
    }

    function stake(uint256[] memory _tokens) external {
        // ...
    }

    function unstake(uint256[] memory _tokens) external {
        // ...
    }

    function toggleSale() external onlyOwner {
        saleActive = !saleActive;
    }
}
