/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IStakableInterface extends utils.Interface {
  functions: {
    "stake(uint256[],uint8)": FunctionFragment;
    "unstake(uint256[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "stake" | "unstake"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Stake(address,uint256[],uint256)": EventFragment;
    "Unstake(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface StakeEventObject {
  _owner: string;
  _tokens: BigNumber[];
  _lockinPeriod: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  _owner: string;
  _tokens: BigNumber[];
}
export type UnstakeEvent = TypedEvent<
  [string, BigNumber[]],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface IStakable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    stake(
      _tokens: PromiseOrValue<BigNumberish>[],
      _lockin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  stake(
    _tokens: PromiseOrValue<BigNumberish>[],
    _lockin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _tokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    stake(
      _tokens: PromiseOrValue<BigNumberish>[],
      _lockin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Stake(address,uint256[],uint256)"(
      _owner?: PromiseOrValue<string> | null,
      _tokens?: null,
      _lockinPeriod?: null
    ): StakeEventFilter;
    Stake(
      _owner?: PromiseOrValue<string> | null,
      _tokens?: null,
      _lockinPeriod?: null
    ): StakeEventFilter;

    "Unstake(address,uint256[])"(
      _owner?: PromiseOrValue<string> | null,
      _tokens?: null
    ): UnstakeEventFilter;
    Unstake(
      _owner?: PromiseOrValue<string> | null,
      _tokens?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    stake(
      _tokens: PromiseOrValue<BigNumberish>[],
      _lockin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    stake(
      _tokens: PromiseOrValue<BigNumberish>[],
      _lockin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
