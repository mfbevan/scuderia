/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Scoot,
  ScootInterface,
} from "../../../contracts/implementations/Scoot";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "defaultOperators",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getUnclaimedBalance",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "grantToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001af338038062001af3833981810160405281019062000037919062000331565b6040518060400160405280600581526020017f53636f6f740000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f53435400000000000000000000000000000000000000000000000000000000008152508160039081620000b49190620005d8565b508060049081620000c69190620005d8565b505050620000fd7f837610ea59ee179a769a71cce1d7a53d3a092e20098f7af6b3df0489d0e60da960001b6200010560201b60201c565b5050620006bf565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000131816200011c565b81146200013d57600080fd5b50565b600081519050620001518162000126565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001a7826200015c565b810181811067ffffffffffffffff82111715620001c957620001c86200016d565b5b80604052505050565b6000620001de62000108565b9050620001ec82826200019c565b919050565b600067ffffffffffffffff8211156200020f576200020e6200016d565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002528262000225565b9050919050565b620002648162000245565b81146200027057600080fd5b50565b600081519050620002848162000259565b92915050565b6000620002a16200029b84620001f1565b620001d2565b90508083825260208201905060208402830185811115620002c757620002c662000220565b5b835b81811015620002f45780620002df888262000273565b845260208401935050602081019050620002c9565b5050509392505050565b600082601f83011262000316576200031562000157565b5b8151620003288482602086016200028a565b91505092915050565b600080604083850312156200034b576200034a62000112565b5b60006200035b8582860162000140565b925050602083015167ffffffffffffffff8111156200037f576200037e62000117565b5b6200038d85828601620002fe565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ea57607f821691505b6020821081036200040057620003ff620003a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042b565b6200047686836200042b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004b9620004b3620004ad846200011c565b6200048e565b6200011c565b9050919050565b6000819050919050565b620004d58362000498565b620004ed620004e482620004c0565b84845462000438565b825550505050565b600090565b62000504620004f5565b62000511818484620004ca565b505050565b5b8181101562000539576200052d600082620004fa565b60018101905062000517565b5050565b601f8211156200058857620005528162000406565b6200055d846200041b565b810160208510156200056d578190505b620005856200057c856200041b565b83018262000516565b50505b505050565b600082821c905092915050565b6000620005ad600019846008026200058d565b1980831691505092915050565b6000620005c883836200059a565b9150826002028217905092915050565b620005e38262000397565b67ffffffffffffffff811115620005ff57620005fe6200016d565b5b6200060b8254620003d1565b620006188282856200053d565b600060209050601f8311600181146200065057600084156200063b578287015190505b620006478582620005ba565b865550620006b7565b601f198416620006608662000406565b60005b828110156200068a5784890151825560018201915060208501945060208101905062000663565b86831015620006aa5784890151620006a6601f8916826200059a565b8355505b6001600288020188555050505b505050505050565b61142480620006cf6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637b47ec1a11610097578063a9059cbb11610066578063a9059cbb146102af578063dd62ed3e146102df578063f8b2cb4f1461030f578063f8fb886f1461032b57610100565b80637b47ec1a1461022957806386f8950a1461024557806395d89b4114610261578063a457c2d71461027f57610100565b8063313ce567116100d3578063313ce567146101a157806339509351146101bf5780634451d89f146101ef57806370a08231146101f957610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610347565b60405161011a9190610cd4565b60405180910390f35b61013d60048036038101906101389190610d8f565b6103d9565b60405161014a9190610dea565b60405180910390f35b61015b6103fc565b6040516101689190610e14565b60405180910390f35b61018b60048036038101906101869190610e2f565b610406565b6040516101989190610dea565b60405180910390f35b6101a9610435565b6040516101b69190610e9e565b60405180910390f35b6101d960048036038101906101d49190610d8f565b61043e565b6040516101e69190610dea565b60405180910390f35b6101f7610475565b005b610213600480360381019061020e9190610eb9565b6104a3565b6040516102209190610e14565b60405180910390f35b610243600480360381019061023e9190610ee6565b6104eb565b005b61025f600480360381019061025a9190610eb9565b61051a565b005b610269610549565b6040516102769190610cd4565b60405180910390f35b61029960048036038101906102949190610d8f565b6105db565b6040516102a69190610dea565b60405180910390f35b6102c960048036038101906102c49190610d8f565b610652565b6040516102d69190610dea565b60405180910390f35b6102f960048036038101906102f49190610f13565b610675565b6040516103069190610e14565b60405180910390f35b61032960048036038101906103249190610eb9565b6106fc565b005b61034560048036038101906103409190610d8f565b61072b565b005b60606003805461035690610f82565b80601f016020809104026020016040519081016040528092919081815260200182805461038290610f82565b80156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b5050505050905090565b6000806103e461075b565b90506103f1818585610763565b600191505092915050565b6000600254905090565b60008061041161075b565b905061041e85828561092c565b6104298585856109b8565b60019150509392505050565b60006012905090565b60008061044961075b565b905061046a81858561045b8589610675565b6104659190610fe2565b610763565b600191505092915050565b6104a17f1975319b9bf710dbfa339bd5064a86721a395efda85fba94bb8a9c69a6ace84d60001b610c37565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105177f9e720ed2eaf9fa7979dc350af783263b679287ed0684c0992473a34668659a5360001b610c37565b50565b6105467f7bc88c30de07e13abfe5dcf103871f24252a83862e46bad40b15d342ffb8a2b160001b610c37565b50565b60606004805461055890610f82565b80601f016020809104026020016040519081016040528092919081815260200182805461058490610f82565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b5050505050905090565b6000806105e661075b565b905060006105f48286610675565b905083811015610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090611088565b60405180910390fd5b6106468286868403610763565b60019250505092915050565b60008061065d61075b565b905061066a8185856109b8565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6107287f775ccddb11eba1294ce85f3aa846277870dd69d155cb0ff8f5c923c78105848360001b610c37565b50565b6107577fe1cf3da3e75b55858a6c83e287b5043a3c2324a570acb9427b0f963b45c1c3c360001b610c37565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c99061111a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610838906111ac565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161091f9190610e14565b60405180910390a3505050565b60006109388484610675565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109b257818110156109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90611218565b60405180910390fd5b6109b18484848403610763565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e906112aa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d9061133c565b60405180910390fd5b610aa1838383610c3a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906113ce565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bba9190610fe2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c1e9190610e14565b60405180910390a3610c31848484610c3f565b50505050565b50565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c7e578082015181840152602081019050610c63565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ca682610c44565b610cb08185610c4f565b9350610cc0818560208601610c60565b610cc981610c8a565b840191505092915050565b60006020820190508181036000830152610cee8184610c9b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2682610cfb565b9050919050565b610d3681610d1b565b8114610d4157600080fd5b50565b600081359050610d5381610d2d565b92915050565b6000819050919050565b610d6c81610d59565b8114610d7757600080fd5b50565b600081359050610d8981610d63565b92915050565b60008060408385031215610da657610da5610cf6565b5b6000610db485828601610d44565b9250506020610dc585828601610d7a565b9150509250929050565b60008115159050919050565b610de481610dcf565b82525050565b6000602082019050610dff6000830184610ddb565b92915050565b610e0e81610d59565b82525050565b6000602082019050610e296000830184610e05565b92915050565b600080600060608486031215610e4857610e47610cf6565b5b6000610e5686828701610d44565b9350506020610e6786828701610d44565b9250506040610e7886828701610d7a565b9150509250925092565b600060ff82169050919050565b610e9881610e82565b82525050565b6000602082019050610eb36000830184610e8f565b92915050565b600060208284031215610ecf57610ece610cf6565b5b6000610edd84828501610d44565b91505092915050565b600060208284031215610efc57610efb610cf6565b5b6000610f0a84828501610d7a565b91505092915050565b60008060408385031215610f2a57610f29610cf6565b5b6000610f3885828601610d44565b9250506020610f4985828601610d44565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f9a57607f821691505b602082108103610fad57610fac610f53565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fed82610d59565b9150610ff883610d59565b92508282019050808211156110105761100f610fb3565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611072602583610c4f565b915061107d82611016565b604082019050919050565b600060208201905081810360008301526110a181611065565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611104602483610c4f565b915061110f826110a8565b604082019050919050565b60006020820190508181036000830152611133816110f7565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611196602283610c4f565b91506111a18261113a565b604082019050919050565b600060208201905081810360008301526111c581611189565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611202601d83610c4f565b915061120d826111cc565b602082019050919050565b60006020820190508181036000830152611231816111f5565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611294602583610c4f565b915061129f82611238565b604082019050919050565b600060208201905081810360008301526112c381611287565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611326602383610c4f565b9150611331826112ca565b604082019050919050565b6000602082019050818103600083015261135581611319565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006113b8602683610c4f565b91506113c38261135c565b604082019050919050565b600060208201905081810360008301526113e7816113ab565b905091905056fea2646970667358221220725791eca6bf812e5a7e598d67affa94b49127e2443ee0bd1553df22ee4137df64736f6c63430008100033";

type ScootConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ScootConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Scoot__factory extends ContractFactory {
  constructor(...args: ScootConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialSupply: PromiseOrValue<BigNumberish>,
    defaultOperators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Scoot> {
    return super.deploy(
      initialSupply,
      defaultOperators,
      overrides || {}
    ) as Promise<Scoot>;
  }
  override getDeployTransaction(
    initialSupply: PromiseOrValue<BigNumberish>,
    defaultOperators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      initialSupply,
      defaultOperators,
      overrides || {}
    );
  }
  override attach(address: string): Scoot {
    return super.attach(address) as Scoot;
  }
  override connect(signer: Signer): Scoot__factory {
    return super.connect(signer) as Scoot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ScootInterface {
    return new utils.Interface(_abi) as ScootInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Scoot {
    return new Contract(address, _abi, signerOrProvider) as Scoot;
  }
}
